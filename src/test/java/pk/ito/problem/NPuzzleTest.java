package pk.ito.problem;

import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;

import java.util.*;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

@QuarkusTest
class NPuzzleTest {

  @ParameterizedTest
  @ValueSource(ints = {8, 15, 24, 35, 48})
  void generatingConstructorTest(int n) {
    NPuzzle underTest = new NPuzzle(n);
    System.out.println("generated by: " + underTest.getCreatingAction().getDescription());
    System.out.println("given N value: " + underTest.getN());
    System.out.println("calculated A value: " + underTest.getA());
    System.out.println("solvable: " + underTest.isSolvable(underTest.getBoard()));
    System.out.println("0 pos: " + underTest.find0positionFromBottom(underTest.getBoard(), underTest.getA()));
    System.out.println("current board: " + underTest.getBoard());
    System.out.println("pretty print: ");
    System.out.println(underTest.getPrettyStringBoard());

    assertFalse(underTest.isSolved());
    assertTrue(underTest.isSolvable(underTest.getBoard()));
    assertTrue(underTest.getA() < underTest.getN());
  }

  private static Stream<Arguments> isSolvableTestSetProducer() {
    return Stream.of(
        Arguments.of(8, new int[] {1, 8, 2, 0, 4, 3, 7, 6, 5}, true, 10),
        Arguments.of(15, new int[] {13, 2, 10, 3, 1, 12, 8, 4, 5, 0, 9, 6, 15, 14, 11, 7}, true, 41),
        Arguments.of(15, new int[] {6, 13, 7, 10, 8, 9, 11, 0, 15, 2, 12, 5, 14, 3, 1, 4}, true, 62),
        Arguments.of(15, new int[] {3, 9, 1, 15, 14, 11, 4, 6, 13, 0, 10, 12, 2, 7, 8, 5}, false, 56),
        Arguments.of(8, new int[] {0, 3, 1, 4, 8, 7, 5, 6, 2}, true, 12),
        Arguments.of(8, new int[] {0, 3, 1, 4, 8, 7, 6, 5, 2}, false, 13)
    );
  }

  @ParameterizedTest
  @MethodSource("isSolvableTestSetProducer")
  void isSolvableTest(int n, int[] board, boolean expectedIsSolvable, int expectedInversions) {
    ArrayList<Integer> testBoard = new ArrayList<>();
    Arrays.stream(board).forEach(testBoard::add);
    NPuzzle puzzle = new NPuzzle(n, testBoard);
    assertEquals(expectedIsSolvable, puzzle.isSolvable(puzzle.getBoard()));
    assertEquals(expectedInversions, puzzle.countBoardInversions(puzzle.getBoard()));
  }

  private static Stream<Arguments> isSolvedTestSetProducer() {
    return Stream.of(
        Arguments.of(8, new int[] {1, 8, 2, 0, 4, 3, 7, 6, 5}, false),
        Arguments.of(15, new int[] {13, 2, 10, 3, 1, 12, 8, 4, 5, 0, 9, 6, 15, 14, 11, 7}, false),
        Arguments.of(15, new int[] {6, 13, 7, 10, 8, 9, 11, 0, 15, 2, 12, 5, 14, 3, 1, 4}, false),
        Arguments.of(15, new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0}, true),
        Arguments.of(8, new int[] {0, 3, 1, 4, 8, 7, 5, 6, 2}, false),
        Arguments.of(8, new int[] {1, 2, 3, 4, 5, 6, 7, 8, 0}, true)
    );
  }

  @ParameterizedTest
  @MethodSource("isSolvedTestSetProducer")
  void isSolvedTest(int n, int[] board, boolean expectedIsSolved) {
    ArrayList<Integer> testBoard = new ArrayList<>();
    Arrays.stream(board).forEach(testBoard::add);
    NPuzzle puzzle = new NPuzzle(n, testBoard);
    assertEquals(expectedIsSolved, puzzle.isSolved());
  }

  private static Stream<Arguments> generateChildrenTestSetProducer() {
    return Stream.of(
        Arguments.of(8, new int[] {1, 2, 3, 4, 0, 5, 6, 7, 8}, 4),
        Arguments.of(8, new int[] {0, 2, 3, 4, 1, 5, 6, 7, 8}, 2),
        Arguments.of(8, new int[] {1, 2, 3, 4, 8, 5, 6, 7, 0}, 2),
        Arguments.of(8, new int[] {1, 2, 0, 4, 3, 5, 6, 7, 8}, 2),
        Arguments.of(8, new int[] {1, 2, 3, 4, 6, 5, 0, 7, 8}, 2),
        Arguments.of(8, new int[] {1, 2, 3, 0, 6, 5, 4, 7, 8}, 3),
        Arguments.of(8, new int[] {1, 2, 3, 4, 6, 0, 5, 7, 8}, 3),
        Arguments.of(15, new int[] {13, 2, 10, 3, 1, 12, 8, 4, 5, 0, 9, 6, 15, 14, 11, 7}, 4),
        Arguments.of(15, new int[] {6, 13, 7, 10, 8, 9, 11, 0, 15, 2, 12, 5, 14, 3, 1, 4}, 3),
        Arguments.of(15, new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0}, 2),
        Arguments.of(8, new int[] {0, 3, 1, 4, 8, 7, 5, 6, 2}, 2),
        Arguments.of(8, new int[] {1, 2, 3, 4, 5, 6, 7, 8, 0}, 2)
    );
  }

  @ParameterizedTest
  @MethodSource("generateChildrenTestSetProducer")
  void generateChildrenTest(int n, int[] board, int expectedChildrenCount) {
    ArrayList<Integer> testBoard = new ArrayList<>();
    Arrays.stream(board).forEach(testBoard::add);
    NPuzzle puzzle = new NPuzzle(n, testBoard);
    List<NPuzzle> children = puzzle.generateChildren();
    System.out.println(puzzle.getPrettyStringBoard());
    children.forEach(p -> {
      System.out.println(p.getCreatingAction());
      System.out.println(p.getPrettyStringBoard());
    });
    assertEquals(expectedChildrenCount, children.size());
  }

}